# 保存完整结果
write.csv(alpha_df, file.path(out_dir, paste0("alpha_diversity_COMPLETE_", name, ".csv")), row.names=TRUE)
# 动态确定可用的指标
available_metrics <- c("Shannon", "Simpson", "InvSimpson", "Observed", "Richness", "Number")
# 检查Chao1是否可用
if("Chao1" %in% colnames(alpha_df) && !all(is.na(alpha_df$Chao1))) {
available_metrics <- c(available_metrics, "Chao1")
cat("✓ Chao1 available for", name, "\n")
} else {
cat("✗ Chao1 not available for", name, "\n")
}
# 检查ACE是否可用
if("ACE" %in% colnames(alpha_df) && !all(is.na(alpha_df$ACE))) {
available_metrics <- c(available_metrics, "ACE")
cat("✓ ACE available for", name, "\n")
} else {
cat("✗ ACE not available for", name, "\n")
}
cat("Final available metrics for", name, ":", paste(available_metrics, collapse = ", "), "\n")
# 在统计结果文件中添加α多样性标题
cat("ALPHA DIVERSITY RESULTS:\n", file = stat_results_file, append = TRUE)
cat("------------------------\n", file = stat_results_file, append = TRUE)
for(metric in available_metrics){
# 检查该指标是否有有效数据
if(!metric %in% colnames(alpha_df) || all(is.na(alpha_df[[metric]]))) {
cat("Warning: No valid data for", metric, "in", name, "\n")
next
}
# 移除NA值
alpha_clean <- alpha_df[!is.na(alpha_df[[metric]]), ]
if(nrow(alpha_clean) == 0) {
cat("Warning: All values are NA for", metric, "in", name, "\n")
next
}
# 统计信息
stat_df <- alpha_clean %>%
group_by(Group) %>%
summarise(
mean = mean(!!sym(metric), na.rm = TRUE),
median = median(!!sym(metric), na.rm = TRUE),
sd = sd(!!sym(metric), na.rm = TRUE)
)
# 组间显著性检验
test_result <- perform_statistical_test(alpha_clean, metric)
# 格式化p值文本 - 在α分析图中确认显示p值
if(!is.na(test_result$p.value)) {
if(test_result$p.value < 0.001) {
pval_text <- "p < 0.001"
pval_numeric <- "< 0.001"
} else if(test_result$p.value < 0.01) {
pval_text <- "p < 0.01"
pval_numeric <- sprintf("%.3f", test_result$p.value)
} else if(test_result$p.value < 0.05) {
pval_text <- paste0("p = ", sprintf("%.3f", test_result$p.value))
pval_numeric <- sprintf("%.3f", test_result$p.value)
} else {
pval_text <- paste0("p = ", sprintf("%.3f", test_result$p.value))
pval_numeric <- sprintf("%.3f", test_result$p.value)
}
pval_text <- paste0(pval_text, " (", test_result$method, ")")
if(test_result$note != "") {
pval_text <- paste0(pval_text, " [", test_result$note, "]")
}
} else {
pval_text <- paste0("No test (", test_result$method, ")")
pval_numeric <- "NA"
}
# 添加数据可靠性说明
reliability_note <- ""
if(metric == "Chao1") {
reliability_note <- " [Based on converted data - interpret with caution]"
} else if(metric == "ACE") {
reliability_note <- " [Based on converted data - EXTREME caution advised]"
} else {
reliability_note <- " [Based on original data - high reliability]"
}
# 副标题文本 - 确保显示p值
subtitle_text <- paste0(
paste(stat_df$Group, ": mean=", round(stat_df$mean, 2),
"±", round(stat_df$sd, 2), collapse="; "),
" | ", pval_text, reliability_note
)
# 将α多样性结果保存到文件
cat(paste0(metric, ": ", pval_text, reliability_note, "\n"), file = stat_results_file, append = TRUE)
if(!is.na(test_result$p.value)) {
cat(paste0("  P-value: ", pval_numeric, "\n"), file = stat_results_file, append = TRUE)
}
cat(paste0("  Method: ", test_result$method, "\n"), file = stat_results_file, append = TRUE)
if(test_result$note != "") {
cat(paste0("  Note: ", test_result$note, "\n"), file = stat_results_file, append = TRUE)
}
cat(paste0("  Samples: Control (n=", sum(alpha_clean$Group == "Control"), "), MI (n=", sum(alpha_clean$Group == "MI"), ")\n"), file = stat_results_file, append = TRUE)
cat("\n", file = stat_results_file, append = TRUE)
# 绘图 - 根据可靠性使用不同颜色
fill_colors <- if(metric == "ACE") {
c("Control" = "#FF0000", "MI" = "#8B0000")  # 红色系 - 极度警告
} else if(metric == "Chao1") {
c("Control" = "#FF7F00", "MI" = "#B15928")  # 橙色系 - 警告色
} else {
c("Control" = "#1F78B4", "MI" = "#E31A1C")  # 蓝红色系 - 正常色
}
# 使用英文标题避免编码问题
title_text <- paste("Alpha Diversity -", metric, "(", name, ")")
p <- ggplot(alpha_clean, aes(x = Group, y = !!sym(metric), fill = Group)) +
geom_violin(trim = FALSE, alpha = 1, width = 0.8) +
geom_boxplot(width = 0.15, outlier.size = 0.8, fill = "white", alpha = 0.7) +
geom_jitter(width = 0.1, size = 1, alpha = 0.6) +
scale_fill_manual(values = fill_colors) +
theme_classic() +
theme(
legend.position = "none",
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 8),
axis.title = element_text(face = "bold"),
axis.text = element_text(size = 10)
) +
labs(
title = title_text,
subtitle = subtitle_text,
x = "Group",
y = metric
)
# 保存图片
ggsave(
file.path(out_dir, paste0("alpha_", metric, "_", name, ".pdf")),
p, width = 8, height = 6
)
cat("Alpha test (", metric, ") for", name, ":", pval_text, reliability_note, "\n")
}
# -------------------------
# β PCoA (Bray-Curtis) - 修改部分：显示p值和R²值
# -------------------------
# 使用相对丰度数据进行β多样性分析
otu_rel <- apply(otu, 2, function(x) x/sum(x))
# 检查是否有足够样本进行β多样性分析
if(ncol(otu_rel) < 3) {
cat("Warning: Not enough samples for beta diversity analysis in", name, "\n")
cat("BETA DIVERSITY: Not enough samples for analysis\n\n", file = stat_results_file, append = TRUE)
next
}
dist_bc <- vegdist(t(otu_rel), method = "bray")
pcoa_res <- pcoa(dist_bc)
pco_df <- data.frame(
sample = rownames(pcoa_res$vectors),
PC1 = pcoa_res$vectors[, 1],
PC2 = pcoa_res$vectors[, 2]
)
pco_df$Group <- meta_sub$Group
# PERMANOVA - 获取p值和R²值
permanova_text <- "No PERMANOVA test"
pval <- NA
r_squared <- NA
if("Group" %in% colnames(meta_sub) && length(unique(pco_df$Group)) > 1){
adonis_res <- adonis2(dist_bc ~ Group, data = meta_sub)
pval <- adonis_res$`Pr(>F)`[1]
r_squared <- adonis_res$R2[1]
if(!is.na(pval) && !is.na(r_squared)) {
# 格式化p值
if(pval < 0.001) {
pval_formatted <- "p < 0.001"
} else if(pval < 0.01) {
pval_formatted <- "p < 0.01"
} else if(pval < 0.05) {
pval_formatted <- paste0("p = ", sprintf("%.3f", pval))
} else {
pval_formatted <- paste0("p = ", sprintf("%.3f", pval))
}
# 格式化R²值
r2_formatted <- sprintf("R² = %.3f", r_squared)
# 组合文本 - 在β分析图中同时显示p值和R²值
permanova_text <- paste0("PERMANOVA: ", pval_formatted, ", ", r2_formatted)
} else {
permanova_text <- "PERMANOVA test failed"
}
}
# 将β多样性结果保存到文件
cat("BETA DIVERSITY RESULTS:\n", file = stat_results_file, append = TRUE)
cat("-----------------------\n", file = stat_results_file, append = TRUE)
cat(paste0("Method: PERMANOVA (Bray-Curtis distance)\n"), file = stat_results_file, append = TRUE)
if(!is.na(pval) && !is.na(r_squared)) {
cat(paste0("P-value: ", sprintf("%.6f", pval), "\n"), file = stat_results_file, append = TRUE)
cat(paste0("R-squared: ", sprintf("%.6f", r_squared), "\n"), file = stat_results_file, append = TRUE)
cat(paste0("Result: ", permanova_text, "\n"), file = stat_results_file, append = TRUE)
} else {
cat(paste0("Result: ", permanova_text, "\n"), file = stat_results_file, append = TRUE)
}
cat(paste0("Samples: Control (n=", sum(pco_df$Group == "Control"), "), MI (n=", sum(pco_df$Group == "MI"), ")\n"), file = stat_results_file, append = TRUE)
cat("\n", file = stat_results_file, append = TRUE)
# 样本数
group_counts <- table(pco_df$Group)
n_text <- paste(names(group_counts), "n =", group_counts, collapse = "; ")
# 绘图（使用英文标题）
title_text <- paste("PCoA (Bray-Curtis) -", name)
p_pcoa <- ggplot(pco_df, aes(x = PC1, y = PC2, color = Group, fill = Group)) +
geom_point(size = 3, alpha = 0.8) +
stat_ellipse(level = 0.95, linetype = 2, alpha = 0.5) +
scale_color_manual(values = c("Control" = "#1F78B4", "MI" = "#E31A1C")) +
scale_fill_manual(values = c("Control" = "#1F78B4", "MI" = "#E31A1C")) +
theme_classic() +
theme(
plot.title = element_text(face = "bold", size = 14),
plot.subtitle = element_text(size = 10),
legend.position = "right"
) +
labs(
title = title_text,
subtitle = paste(n_text, "|", permanova_text),  # 这里同时显示样本数和统计结果
x = paste0("PC1 (", round(pcoa_res$values$Relative_eig[1] * 100, 1), "%)"),
y = paste0("PC2 (", round(pcoa_res$values$Relative_eig[2] * 100, 1), "%)"),
color = "Group", fill = "Group"
)
ggsave(
file.path(out_dir, paste0("beta_pcoa_bray_", name, ".pdf")),
p_pcoa, width = 7, height = 5
)
cat("PERMANOVA for", name, ":", permanova_text, "\n")
}
cat("\n===== Analysis Complete! =====\n")
cat("Important: Check 'ANALYSIS_WARNING_README.txt' in output directory\n")
cat("Statistical results saved to: 'diversity_statistical_results.txt'\n")
cat("Note: ACE calculation is challenging with converted relative abundance data\n")
cat("Recommendation: Focus on Shannon, Simpson, and Observed species for reliable results\n")
# =============================================================================
# 微生物数据流行率过滤脚本
# 适用于R 4.5.1版本
# =============================================================================
# 清理环境
rm(list = ls())
# 设置工作目录（可选）
# setwd("E:/Python/MI_Analysis")
# 安装和加载必要的包
cat("正在安装和加载必要的包...\n")
if (!require("readxl", quietly = TRUE)) {
install.packages("readxl")
library(readxl)
} else {
library(readxl)
}
if (!require("dplyr", quietly = TRUE)) {
install.packages("dplyr")
library(dplyr)
} else {
library(dplyr)
}
# 定义文件路径
file_paths <- c(
virus = "E:/Python/MI_Analysis/origin_data/心梗组_病毒(新).xlsx",
bacteria = "E:/Python/MI_Analysis/origin_data/心梗组_细菌.xlsx",
fungi = "E:/Python/MI_Analysis/origin_data/心梗组_真菌.xlsx",
archaea = "E:/Python/MI_Analysis/origin_data/心梗组_古菌.xlsx"
)
# 检查文件是否存在
cat("检查文件是否存在...\n")
for (path in file_paths) {
if (file.exists(path)) {
cat("找到文件:", path, "\n")
} else {
cat("警告: 文件不存在:", path, "\n")
}
}
# 读取Excel数据的函数
read_microbiome_data <- function(file_path) {
cat("正在读取文件:", basename(file_path), "\n")
tryCatch({
data <- read_excel(file_path)
cat("原始数据维度 - 行:", nrow(data), "列:", ncol(data), "\n")
if (ncol(data) > 1) {
row_names <- as.character(data[[1]])
data_df <- as.data.frame(data[, -1])
rownames(data_df) <- row_names
colnames(data_df) <- colnames(data)[-1]
cat("处理后的维度 - 物种数:", nrow(data_df), "样本数:", ncol(data_df), "\n")
return(data_df)
} else {
stop("数据列数不足，无法处理")
}
}, error = function(e) {
cat("读取文件时出错:", e$message, "\n")
return(NULL)
})
}
# 流行率过滤函数
prevalence_filter <- function(data, prevalence_threshold = 0.2) {
if (is.null(data) || nrow(data) == 0 || ncol(data) == 0) {
cat("数据为空或维度异常，跳过过滤\n")
return(NULL)
}
cat("正在进行流行率过滤...\n")
data_t <- as.data.frame(t(data))
prevalence <- apply(data_t, 2, function(x) sum(x > 0, na.rm = TRUE) / length(x[!is.na(x)]))
filtered_indices <- prevalence > prevalence_threshold
filtered_species <- names(prevalence)[filtered_indices]
cat("原始物种数:", length(prevalence), "\n")
cat("过滤后物种数:", sum(filtered_indices), "\n")
cat("流行率阈值:", prevalence_threshold * 100, "%\n")
if (sum(filtered_indices) == 0) {
cat("警告: 没有物种通过过滤！\n")
return(NULL)
}
filtered_data <- data[filtered_species, , drop = FALSE]
return(filtered_data)
}
# 保存CSV数据
save_filtered_data <- function(data, data_name, output_dir = "E:/Python/MI_Analysis/metagenome/data_figures/filtered_data_20percent/") {
if (is.null(data)) {
cat(data_name, "数据为空，跳过保存\n")
return(FALSE)
}
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
output_file <- file.path(output_dir, paste0(data_name, "_filtered_20percent.csv"))
data_to_save <- data
data_to_save$Taxonomy <- rownames(data)
data_to_save <- data_to_save[, c("Taxonomy", setdiff(colnames(data_to_save), "Taxonomy"))]
write.csv(data_to_save, output_file, row.names = FALSE)
cat("已保存CSV文件:", output_file, "\n")
return(TRUE)
}
# 生成总结报告
generate_summary_report <- function(original_list, filtered_list) {
cat("\n", paste(rep("=", 50), collapse = ""), "\n")
cat("          流行率过滤总结报告\n")
cat(paste(rep("=", 50), collapse = ""), "\n")
names <- c("病毒", "细菌", "真菌", "古菌")
for (i in 1:4) {
cat("\n--- ", names[i], " ---\n", sep = "")
orig_data <- original_list[[i]]
filtered_data <- filtered_list[[i]]
if (!is.null(orig_data) && !is.null(filtered_data)) {
orig_count <- nrow(orig_data)
filtered_count <- nrow(filtered_data)
retention_rate <- if (orig_count > 0) round(filtered_count / orig_count * 100, 1) else NA
cat("原始物种数: ", orig_count, "\n", sep = "")
cat("过滤后物种数: ", filtered_count, "\n", sep = "")
cat("保留比例: ", retention_rate, "%\n", sep = "")
} else {
if (is.null(orig_data)) cat("原始数据读取失败\n")
if (is.null(filtered_data)) cat("过滤后数据为空\n")
}
}
}
# 主函数
main <- function() {
cat("开始微生物数据流行率过滤流程\n")
cat("开始时间:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n\n")
virus_data <- read_microbiome_data(file_paths["virus"])
bacteria_data <- read_microbiome_data(file_paths["bacteria"])
fungi_data <- read_microbiome_data(file_paths["fungi"])
archaea_data <- read_microbiome_data(file_paths["archaea"])
original_list <- list(virus_data, bacteria_data, fungi_data, archaea_data)
cat("\n步骤2: 应用流行率过滤(阈值20%)...\n")
virus_filtered <- prevalence_filter(virus_data, 0.2)
bacteria_filtered <- prevalence_filter(bacteria_data, 0.2)
fungi_filtered <- prevalence_filter(fungi_data, 0.2)
archaea_filtered <- prevalence_filter(archaea_data, 0.2)
filtered_list <- list(virus_filtered, bacteria_filtered, fungi_filtered, archaea_filtered)
cat("\n步骤3: 保存过滤后的数据...\n")
save_filtered_data(virus_filtered, "病毒")
save_filtered_data(bacteria_filtered, "细菌")
save_filtered_data(fungi_filtered, "真菌")
save_filtered_data(archaea_filtered, "古菌")
cat("\n步骤4: 生成总结报告...\n")
generate_summary_report(original_list, filtered_list)
cat("\n", paste(rep("=", 50), collapse = ""), "\n流程完成！\n")
}
# 执行主函数
main()
cat("脚本执行完毕！\n")
# =============================================================================
# 微生物数据流行率过滤脚本
# 适用于R 4.5.1版本
# =============================================================================
# 清理环境
rm(list = ls())
# 设置工作目录（可选）
# setwd("E:/Python/MI_Analysis")
# 安装和加载必要的包
cat("正在安装和加载必要的包...\n")
if (!require("readxl", quietly = TRUE)) {
install.packages("readxl")
library(readxl)
} else {
library(readxl)
}
if (!require("dplyr", quietly = TRUE)) {
install.packages("dplyr")
library(dplyr)
} else {
library(dplyr)
}
# 定义文件路径
file_paths <- c(
virus = "E:/Python/MI_Analysis/origin_data/心梗组_病毒.xlsx",
bacteria = "E:/Python/MI_Analysis/origin_data/心梗组_细菌.xlsx",
fungi = "E:/Python/MI_Analysis/origin_data/心梗组_真菌.xlsx",
archaea = "E:/Python/MI_Analysis/origin_data/心梗组_古菌.xlsx"
)
# 检查文件是否存在
cat("检查文件是否存在...\n")
for (path in file_paths) {
if (file.exists(path)) {
cat("找到文件:", path, "\n")
} else {
cat("警告: 文件不存在:", path, "\n")
}
}
# 读取Excel数据的函数
read_microbiome_data <- function(file_path) {
cat("正在读取文件:", basename(file_path), "\n")
tryCatch({
data <- read_excel(file_path)
cat("原始数据维度 - 行:", nrow(data), "列:", ncol(data), "\n")
if (ncol(data) > 1) {
row_names <- as.character(data[[1]])
data_df <- as.data.frame(data[, -1])
rownames(data_df) <- row_names
colnames(data_df) <- colnames(data)[-1]
cat("处理后的维度 - 物种数:", nrow(data_df), "样本数:", ncol(data_df), "\n")
return(data_df)
} else {
stop("数据列数不足，无法处理")
}
}, error = function(e) {
cat("读取文件时出错:", e$message, "\n")
return(NULL)
})
}
# 流行率过滤函数
prevalence_filter <- function(data, prevalence_threshold = 0.2) {
if (is.null(data) || nrow(data) == 0 || ncol(data) == 0) {
cat("数据为空或维度异常，跳过过滤\n")
return(NULL)
}
cat("正在进行流行率过滤...\n")
data_t <- as.data.frame(t(data))
prevalence <- apply(data_t, 2, function(x) sum(x > 0, na.rm = TRUE) / length(x[!is.na(x)]))
filtered_indices <- prevalence > prevalence_threshold
filtered_species <- names(prevalence)[filtered_indices]
cat("原始物种数:", length(prevalence), "\n")
cat("过滤后物种数:", sum(filtered_indices), "\n")
cat("流行率阈值:", prevalence_threshold * 100, "%\n")
if (sum(filtered_indices) == 0) {
cat("警告: 没有物种通过过滤！\n")
return(NULL)
}
filtered_data <- data[filtered_species, , drop = FALSE]
return(filtered_data)
}
# 保存CSV数据
save_filtered_data <- function(data, data_name, output_dir = "E:/Python/MI_Analysis/metagenome/data_figures/filtered_data_20percent/") {
if (is.null(data)) {
cat(data_name, "数据为空，跳过保存\n")
return(FALSE)
}
if (!dir.exists(output_dir)) dir.create(output_dir, recursive = TRUE)
output_file <- file.path(output_dir, paste0(data_name, "_filtered_20percent.csv"))
data_to_save <- data
data_to_save$Taxonomy <- rownames(data)
data_to_save <- data_to_save[, c("Taxonomy", setdiff(colnames(data_to_save), "Taxonomy"))]
write.csv(data_to_save, output_file, row.names = FALSE)
cat("已保存CSV文件:", output_file, "\n")
return(TRUE)
}
# 生成总结报告
generate_summary_report <- function(original_list, filtered_list) {
cat("\n", paste(rep("=", 50), collapse = ""), "\n")
cat("          流行率过滤总结报告\n")
cat(paste(rep("=", 50), collapse = ""), "\n")
names <- c("病毒", "细菌", "真菌", "古菌")
for (i in 1:4) {
cat("\n--- ", names[i], " ---\n", sep = "")
orig_data <- original_list[[i]]
filtered_data <- filtered_list[[i]]
if (!is.null(orig_data) && !is.null(filtered_data)) {
orig_count <- nrow(orig_data)
filtered_count <- nrow(filtered_data)
retention_rate <- if (orig_count > 0) round(filtered_count / orig_count * 100, 1) else NA
cat("原始物种数: ", orig_count, "\n", sep = "")
cat("过滤后物种数: ", filtered_count, "\n", sep = "")
cat("保留比例: ", retention_rate, "%\n", sep = "")
} else {
if (is.null(orig_data)) cat("原始数据读取失败\n")
if (is.null(filtered_data)) cat("过滤后数据为空\n")
}
}
}
# 主函数
main <- function() {
cat("开始微生物数据流行率过滤流程\n")
cat("开始时间:", format(Sys.time(), "%Y-%m-%d %H:%M:%S"), "\n\n")
virus_data <- read_microbiome_data(file_paths["virus"])
bacteria_data <- read_microbiome_data(file_paths["bacteria"])
fungi_data <- read_microbiome_data(file_paths["fungi"])
archaea_data <- read_microbiome_data(file_paths["archaea"])
original_list <- list(virus_data, bacteria_data, fungi_data, archaea_data)
cat("\n步骤2: 应用流行率过滤(阈值20%)...\n")
virus_filtered <- prevalence_filter(virus_data, 0.2)
bacteria_filtered <- prevalence_filter(bacteria_data, 0.2)
fungi_filtered <- prevalence_filter(fungi_data, 0.2)
archaea_filtered <- prevalence_filter(archaea_data, 0.2)
filtered_list <- list(virus_filtered, bacteria_filtered, fungi_filtered, archaea_filtered)
cat("\n步骤3: 保存过滤后的数据...\n")
save_filtered_data(virus_filtered, "病毒")
save_filtered_data(bacteria_filtered, "细菌")
save_filtered_data(fungi_filtered, "真菌")
save_filtered_data(archaea_filtered, "古菌")
cat("\n步骤4: 生成总结报告...\n")
generate_summary_report(original_list, filtered_list)
cat("\n", paste(rep("=", 50), collapse = ""), "\n流程完成！\n")
}
# 执行主函数
main()
cat("脚本执行完毕！\n")
